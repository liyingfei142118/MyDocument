where子句的区别与having短语的区别在于作用对象不同。
where子句作用于基本表或视图，且不能用聚集函数（AVG等）做作为条件表达式
having短语作用组，从中选择满足条件的组（（d1,d2,d3,d4）元组）
group by sno 按sno分组

select Sno,AVG(Grade) from SC where AVG(Grade)>=90 group by Sno(错误）;
(使用了聚集函数）
select Sno,AVG(Grade) from SC group by Sno having AVG(Grade)>=90;

视图是指计算机数据库中的视图，是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。

关系数据库的特点：
数据库存在的一个目的就是统一管理数据，减少数据冗余度
数据独立性，指数据和其管理软件独立，以及数据及其结构的独立
数据库就是为了方便用户之间共享数据
数据库中存在锁机制，如果多用户访问可能导致数据不一致等

数据库系统主要管理数据库的存储、事务以及对数据库的操作。 文件系统是操作系统管理文件和存储空间的子系统，主要是分配文件所占的簇、盘块或者建立FAT、管理空间空间等。 数据库系统（database systems），是由数据库及其管理软件组成的系统。主要包括操作系统、各种宿主语言、实用程序以及数据库管理系统。

关系数据库主要功能：
1、数据定义
2、数据操作
3、数据库的运行管理
4、数据组织、存储与管理
5、数据库的保护
6、数据库的维护
7、通信

元组（Tuple） 笛卡尔积中每一个元素（d1，d2，…，dn）叫作一个n元组（n-tuple）或简称元组。 　　元组是关系数据库中的基本概念，关系是一张表，表中的每行就是一个元组，每列就是一个属性。

原子性：事务是一个不可分割的整体，为了保证事务的总体目标，事务必须具有原子性，即当数据修改时，要么全执行，要么全不执行，即不允许事务部分的完成，避免了只执行这些操作的一部分而带来的错误。原子性要求失误必须被完整执行。

一致性：一个事务执行之前和之后，数据库数据必须要保持一致性状态。数据库的一致性状态应该满足模式锁指定的约束，那么在完整执行该事务后数据库仍然处于一致性的状态。为了维护所有数据的完整性，在关系型数据库中，所有规则必须应用到事务的修改上。数据库的一致性状态由用户来负责，由并发控制机制实现。例如银行转账，转账前后两个账户金额之和应保持不变。由此并发操作带来的数据不一致性包括丢失数据修改、读脏数据。不可重复读、产生‘幽灵’数据。

隔离性：隔离性也被成为独立性,当两个或多个事务并发执行时，为了保证数据的安全性，将一个事物内部的操作与事务的操作隔离起来，不被其他正在执行的事务看到。

持久性：持久性也被成为永久性，事务完成之后，DBMS保证它对数据库中的数据的修改是永久性的，当系统或介质发生故障时，该修改也永久保持。持久性一般通过数据库备份与恢复来保证

记录数据库事务,最大限度地保证数据的一致性与安全性
重做日志文件：含对数据库所做的更改记录，这样万一出现故障可以启用数据恢复,一个数据库至少需要两个重做日志文件
归档日志文件：是重做日志文件的脱机副本，这些副本可能对于从介质失败中进行恢复很必要。

共享锁（Share locks简记为S锁）：也称读锁，事务A对对象T加s锁，其他事务也只能对T加S，多个事务可以同时读，但不能有写操作，直到A释放S锁。

排它锁（Exclusivelocks简记为X锁）：也称写锁，事务A对对象T加X锁以后，其他事务不能对T加任何锁，只有事务A可以读写对象T直到A释放X锁。

在一个关系中，如一个属性是构成某一个候选关键字的属性集中的一个属性，则称它为主属性。

数据库设计步骤：
1.需求分析
2.概念结构设计：E-R图、数据字典
3.逻辑结构设计：数据模型
4.物理结构设计
5.数据库实施
6.数据库运行和维护

数据库逻辑设计的主要任务：创建数据库说明。
数据库逻辑设计是整个设计的前半段，包括所需的实体和关系，实体规范化等工作。
数据库逻辑设计：设计数据库的逻辑结构，与具体的DBMS无关，主要反映业务逻辑。

DELETE FROM TABLE waterinfo001;
清除 waterinfo001 表全部记录

DROP TABLE waterinfo001;
删除 waterinfo001 表